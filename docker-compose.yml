services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
#             prod run settings
#             gunicorn config.wsgi:application
#             --bind 0.0.0.0:8000 --workers 3 --threads 2"

    container_name: library-web
    ports:
      - "8001:8000"
    env_file:
      - .env
    volumes:
      # no sync for production
      - ./:/app
      - ./files/media:/files/media
      - ./files/static:/files/static
    depends_on:
      library_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

# Async tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: library-celery
    command: celery -A config worker -l info
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      library_db:
        condition: service_healthy
    restart: always

# Periodic tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: library-celery-beat
    command: celery -A config beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      library_db:
        condition: service_healthy
    restart: always

  nginx:
    image: nginx:alpine
    container_name: library-nginx
    volumes:
      - ./nginx/:/etc/nginx/conf.d:ro/
      - ./files/media:/files/media
      - ./files/static:/files/static
    ports:
      - "80:80"
    depends_on:
      - web
    restart: always

  library_db:
    image: postgres:alpine
    container_name: library-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - library_db:$PGDATA
    restart: always

# Cache Service
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

# RedisInsight
  redisinsight:
    image: redislabs/redisinsight:latest
    ports:
      - "5540:5540"
    depends_on:
      - redis
    restart: always

  telegram:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: library-telegram
    command: python telegram_bot/run_bot.py
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      library_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

volumes:
  library_db:
#  library_media:
#  library_static:
  redis_data:
